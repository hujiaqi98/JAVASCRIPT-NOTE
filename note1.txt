https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new
bug大王
var age;
age = 18;
console.log(age);
var email = 'asdas.com';
console.log(age);
console.log(email);
//输入用户信息
var name = prompt('请输入你的名字');
//弹出用户信息
alert(name);

//变量的扩展【更新变量】
var name = 'abc';
console.log(name);
//控制台输出abc
name = 'bch';
console.log(name);
//控制台输出bch

//多变量声明
var name = 'abc',
    email = 'anksdm.email',
    nume = 12;
//尽量不要使用name为变量名

//两变量换值
var temple,
    apple1 = '青苹果',
    apple2 = '红苹果'; 
temple = apple1;
apple1 = apple2;
apple2 = apple1;
console.log(apple1);
console.log(apple2);
console.log(temple);

//JavaScript是一种动态语言，变量数据类型在程序执行过程中自动识别，并且可以变化
var num;
num = 9;
num = 'abs';

//数字前面0开头表示八进制 010（十进制8）0x开头表示十六进制 a（十进制10）

console.log(NUMBER.MAX_VAULE);//number最大值
console.log(NUMBER.MAX_VAULE*2);//infinity(无限大)

//关于isNAN判断是否为数字的使用(不是数字返回true，是数字返回false)
console.log(isNaN(18))//FALSE
console.log(isNaN('ABC'))//true

//关于引号的使用，可以使用外双内单也可以外单内双

//关于length()的使用 **空白的部分与符号也算长度**
var str = 'abc';
console.log(str.length);//3

//字符串的拼接
字符串类型+任意数据类型=拼接之后的新字符串 //拼接前会把与字符串相加的任意类型转化为字符串型，再拼接成为一个新字符串
console.log('沙漠'+'骆驼');//沙漠骆驼
console.log('年龄'+18);//年龄18


//关于将变量加入字符串的说明
var age = 18;
console.log('年龄是'+age+'岁');//TRUE
console.log('年龄是age岁');//FALSE
**变量不能加引号，加引号会变成字符串**


*************************************************************
简单的交互程序设计
var age = prompt('你的出生年份？');
age = 2020-age;
alert('你今年已经'+age+'岁了')
*************************************************************




//检测变量属于什么数据类型
var num = 12;	
console.log(typeof num);//括号变量 空格变量都行
var flag = true;
console,log(typeof flag);//boolean
var times = undefined;
console.log(typeof undefind);//undefined




**prompt取过来的是string型变量**

//数据类型的转换
**转化为字符串型
var num = 18;
方法一var str = num.toString();
方法二var str = String(num);
方法三利用+拼接符

**转化为数字型
var num = prompt('请输入你的年龄');
1.parseInt(num);
  console.log(parseInt(num));/把字符串型转化为数字型，得到的是整数
2.parseFloat(num);
 console.log(parseFloat(num);/把字符串型转化为数字型，得到的是小数
3.Number(num)//强制转换
4.- * /   //隐式转换
 console.log('12'- 0);//12
console.log('120'- '110');//10

**转化为布尔类型**
Boolean（）
除了'' 0 null undefined NaN 转化为false 其他均为true



**算术运算符**
%取余数
9%2=1

**递增递减运算符**
++ --
放在变量前为前置 放在变量后面为后置（只能和变量配合使用）
var age = 10;
++age;//类似于 age = age + 1;
console.log(++age + 10);//21 
******前置和后置 单独使用 效果一样 ///前置先运算再返回值 后置先返回值在运算

******************************
var e = 10;
var f = e++ + ++e;
console.log(f);//22
******************************
==(等于判断) 会把字符串型的数据转换为数字型      !=(不等于)
console.log(18 == '18');//true 
===（全等于判断符号 要求两侧值和数据类型完全一样才输出true）
console.log(18 === '18');//false


********************逻辑运算符号**********************
 		&& 与(false&&true)
		||或 (true||true)
		！非 (!true) 
******************************************************    表达式 空的否定的为假其余都是真
逻辑短路运算原理；当有多个表达式（值）**不是布尔值 **时，左边的表达式可以确定结果时，就不再继续运算右边的值
短路逻辑与console.log(表达式一 && 表达式二);当表达式一为真时 返回表达式二 当表达式一为假时（0）返回表达式一
短路逻辑或console.log(表达式一 || 表达式二);当表达式一为真时 返回表达式一 当表达式一为假时（0）返回表达式二

///////////////////////////////////////////////////////
if的语法结构
if(判断表达式){
//执行语句
}




if(判断表达式){
//执行语句一
} else {
//执行语句二
}

if(判断表达式一){
//语句一
} else if(判断表达式二){
//语句二
}else if(判断表达式三){
//语句三
} else {
//语句四
}



****************************************************
三元运算表达式
         ? :
   条件判断式 ？ 表达式一 ： 表达式二;
若条件判断式为真 则返回表达式一的值 否则返回表达式二的值
var result = num > 5? '是的' ： '不是的';





switch(表达式){
    case value:
    执行语句一;
    break;
    case value:
    执行语句二;
    break;
    case value:
    执行语句三;
    break;
    default:
    执行语句四
}

***********输入两个数并输出最大的那个数****************
var a = prompt('请输入第一个数：');
var b = prompt('请输入第二个数：');
a = parseInt(a);
b = parseInt(b);
if(a > b){
alert(a);
}else{
alert(b);
} 
*******************************************************


for(初始化变量;条件判断式;操作表达式){
//循环体
}
初始化变量 就是用var声明的一个普通变量，通常用作计数器使用
条件表达式 就是用来决定循环是否执行 就是终止的条件
操作表达式 就是每次循环最后执行的代码 经常用于计数器变量（递增或者递减）

双层for循环
for(外层初始变量；外层条件判断式；外层操作表达式){
    for(内层初始变量；内层条件表达式；内层操作表达式){
    }
}


****************** 9x9乘法表*******************
var str = ''; 
for(var i = 1;i <= 9;i++ ){
    for(var j =1;j <= i;j++ ){
    str += j + 'x' + i + '=' + i*j + '\t'; 
    }
    str += '\n';
}
console.log(str);
************************************************
while(条件表达式){
//循环体
}


do{
//循环体
}while(条件表达式)
//和while循环不同的地方是，do while是先执行一次循环体，再判断条件 如果条件表达式结果为真 则继续执行循环体 否则退出



*************************************************
continue关键字
continue关键字用于立即跳出本次循环，继续下一次循环（本次循环中continue之后的代码就会少执行）
吃五个包子第三个有虫不吃 继续吃第四个第五个（一共吃了四个）

break关键字
break关键字用于立即跳出整个循环（循环结束）
吃五个包子 第三个发现有虫 其余剩下的都不吃了（一共只吃了两个包子）






//////////////////////////////////////////////////
数组的创建
方法一使用new
var 数组名 = new Array();//创建一个新的空数组
方法二利用数组字面量创建数组
var 数组名 = [];
var num = [1,2,3,4,5,6,7,];
var str = [1,2,3,'apple',true,false];
//声明数组并赋值称为数组的初始化

*********************************************************
*********************************************************
*********************************************************
数组的遍历
遍历：就是把数组中的每个值从头到尾都访问一次（类似于早上上课点名）
var color = ['green','red','black'];
for(var i = 1;i < 3;i++){
    console.log(color[i]);
}



*********************************************************
*********************************************************
*********************************************************


*********************************************************
求数组里面的最大值
var arr = [1,22,44,46,78,3,54,56,23,99];
var max = arr[0];
for(var i = 1; i < arr.length ; i++){
    if(max < arr[i]){
        max = arr[i];
    }
}
console.log(max);
*********************************************************

数组元素长度改变
1.新增数组元素，修改length长度
var arr = ['red','black','green','blue'];
arr,length(7);
//其中索引号是4 5 6 的空间没有给值，就是声明变量未给值，默认值就是undefined
**ps null 是number类型为空时表示 而empty是string为空时表示
2.新增数组元素
通过修改数组索引号 追加数组元素
var arr = ['red','black','green'];
arr[3] = 'pink';
console.log(arr.length)//4
ps  如果直接添加一百的索引号 前面未被定义的都是undefined
如果索引号被占有就是替换元素
arr[0] = 'yellow';
console.log(arr);//arr['yellow','black','green']

push()给数组末尾增加新的（可以是多个）元素：console.log(arr.push(4,'red'));//push完后 返回的是新数组的长度length
unshift() 给数组开头追加新的（可以是多个）元素console.log(arr.unshift(1,2));//unshift完毕后 返回的也是新数组的长度

pop()可以删除数组的最后一个元素
pop()可以删除数组的最后一个元素 **一次只能删除一个元素**
pop()没有参数
pop()完毕之后 返回的结果是删除的那个元素 
原数组会发生变化

shift()可以删除数组的第一个元素
shift()可以删除数组的第一个元素 **一次只能删除一个元素**
shift()没有参数
shift()完毕之后 返回的结果是删除的那个元素 
原数组会发生变化
***************
***************不要直接给数组名赋值 不然里面的数组元素都没有了
***************




			***************            ***************
			*************** 冒泡排序    ***************
			***************             ***************
			冒泡排序：是一种算法，把一系列的数据按照一定的顺序吧进行排列显示（从大到小或者从小到大）
			5  4  3  2  1
		第1趟  交换4次
		第2趟  交换3次  
                第3趟  交换2次
                第4趟  交换1次
                                       
                              JAVASCRIPT 代码
                         arr = [5 , 4 , 3 , 2 , 1];
                         var box;
                         for(var i = 1 ; i < arr.length ; i++){
                              for(var j = 0; j < arr.length - i ; j++){
                                  if(arr[j] > arr[j + 1]){
                                      box = arr[j];
                                      arr[j] = arr[j+1];
                                      arr[j+1] = box;
                                  }
                              }
                          } 
                          console.log(arr);
                            对冒泡算法的改进1 如果只有一个数据 则不进行冒泡
                      arr = [5 , 4 , 3 , 2 , 1];
                      var box;
                      if(arr,length != 1){
                          for(var i = 1 ; i < arr.length ; i++){
                              boolean flag = false;  
                              for(var j = 0; j < arr.length - i ; j++){
                                  if(arr[j] > arr[j + 1]){
                                      box = arr[j];
                                      arr[j] = arr[j+1];
                                      arr[j+1] = box;
				      boolean flag = true;
                                  }
                              }
                              if(flag != true) break;
                          } 
                       } 
                       console.log(arr);                          
                            对冒泡算法的改进2 加入flag标志位 判断如果在第n趟排序中 数组没有交换 则已经得到排序结果
                      arr = [5 , 4 , 3 , 2 , 1];
                      var box;
		      if(arr,length != 1){
                          for(var i = 1 ; i < arr.length ; i++){
                              boolean flag = false;  
                              for(var j = 0; j < arr.length - i ; j++){
                                  if(arr[j] > arr[j + 1]){
                                      box = arr[j];
                                      arr[j] = arr[j+1];
                                      arr[j+1] = box;
				      boolean flag = true;
                                  }
                              }
                              if(flag != true) break;
                          }
		       } 
                          console.log(arr);



函数的声明（function是声明函数的关键字 必须全部小写）
ps 函数是做一件事的 名字一般用动词 如sayhi
ps 函数声明以后不调用 自己是不会执行的
	function 函数名(){
	//函数体
	}
    eg: function sayhi(形参，形参){
	    console.log('hi~~~~~');	
	}
	函数的调用
       
        函数名();
    eg: sayhi();
函数第二种声明方式（匿名函数）: var 变量名 = function(){};//注意fun是变量名 不是函数名//函数表达式声明方式跟声明变量差不多 只不过变量里面存放值 而函数表达式里面寸的是函数
 var fun = function(aru){
     console.log('函数表达式');
     console.log(aru);
 }
fun(pink);

函数的参数可以有也可以没有，数量不限
形参的作用就是用来接受实参
形参可以看作是不用声明的变量

形参实参个数不匹配的问题
1.如果实参的个数多于形参的个数，会取到形参的个数 多出来的实参不参与运算
2.如果实参的个数小于形参的个数， 多出来的形参（形参可以看作是未声明的变量）是undefined （数字加上undefined是NaN）
函数的返回：只要函数遇到return 就把后面的结果 返回给函数的调用者
function getResult(){
    return 666;
}
getResult();//getResult=666;
console.log(getResult());

利用函数求任意两个数最大值
function getSum(num1,num2){
    return = num1 + num2;
}
console.log(getSum(2,8));

利用函数求两个数最大值
function getMax(num1,num2){
    return num1 > num2? num1:num2;
}
console.log(getMax(2,9))

利用函数求数组中的最大值
function getArrMax(arr){ 			//arr是形参接受一个数组
    for(var i = 1 ; i < arr.length ; i++){
        if(arr[0] < arr[i]){
            arr[0] = arr[i];
        }
    }
    return arr[0];
}
console.log(getArrMax([1,5,7,34,56,22]));      //实参是一个数组送进去


函数内部return后面的代码不会被执行 类似于break
return只能返回一个值
return num1,num2;//返回的结果是最后一个值 num2
数组可以当作一个结果来看 所以要返回多个值 用数组进行封装
函数如果没有返回值 被调用后返回undefined
arguments采用伪数组的方式 存贮用户传过来的所有实参 //伪数组：有length 能索引 不能pop push
只有函数有arguments对象 并且每个函数都内置好了arguments

利用arguments 求任意个数 的 数 的最大值
function getMax(){
    var max = arguments[0];
    for(var i = 1 ; i < arguments.length ; i++){
        if(max < arguments[i]){
            max = arguments[i];
        }
    }
    return max;
}
console.log(getMax(2,3,45,13,99,3,23,6676,32,8));//最终输出6676
***************************************************
全局变量和局部变量
全局变量：在 <script>模块中直接 var声明的变量 或者是函数内部没有声明直接赋值的变量

从执行效率看全局变量和局部变量：
(1):全局变量只有在浏览器关闭的时候才会销毁，比较占内存资源
(2):当程序执行完就销毁 比较节约内存资源

作用域链：内部函数访问外部函数的变量，采取的是采用链式查找的方式来决定取哪个值，这种结构称之为作用域链//就近原则
************************************************************
************************************************************
************************************************************
JAVASCRIPT 预解析
浏览器中的js引擎 运行js分两步：预解析 代码执行
	1.预解析：js引擎会把js中的所有 var function 提升到当前作用域的最前面
	2.代码执行 代码按照书写的顺序从上往下执行
预解析分为变量预解析（变量提升）和函数预解析（函数提升）
	变量提升 就是把所有的变量声明提升到当前作用域的最前面 不提升赋值操作
	函数提升 就是把所有的函数声明提升到当前作用域的最前面 不调用函数
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
                   JAVASCRIPT 对象
	对象是一个具体的事物 eg：明星 不是对象 周星驰 是一个对象
        苹果 不是对象 这个苹果 是对象
JAVASCRIPT中的对象：是一组 无序的 相关属性和方法的 集合，所有事物都是对象，例如字符串、数值、数组、函数等。
对象是由 属性 和 方法 组成的
属性：事物的特征，在对象中用属性来表示（常用名词）
方法：事物的行为，在对象中用方法来表示（常用动词）

诺基亚手机：
		属性：大小 颜色 重量 屏幕尺寸 厚度
		方法：打电话 发短信

JAVASCRIPT中有三种创建对象（object）的方式：
	1.利用字面量创建
	2.利用 new Object创建对象
	3.利用构造函数创建对象
1.利用字面量创建对象
	var obj = {
		uname: '张三丰',
		age:'18',
		ssex:'男',
		sayHi:function(){
		    console.log('hi~~');
		}
      	     }
(1)里面的属性或者方法采用键值对的形式 键 属性名 ：值 属性值
(2)多个属性或者方法中间用逗号隔开
(3)方法冒号后面跟的是一个匿名函数
2.利用new Object创建对象
var obj = new Object();//创建了一个新的对象
obj.uname = '张三丰';
obj.age = 18;
obj.sayHi = function(){
    console.log('hi~~');
}
(1)利用等号赋值的方法 添加对象的属性和方法
(2)每个属性和方法之间用 分号结束
调用和第一种相同
******************************************************************************************
3.利用构造函数创建对象：一次创建一个对象，里面很多的属性和方法是大量相同的，因此我们可以利用函数的方法 重复这些相同的代码 把这个函数称为构造函数
构造函数的语法格式
function 构造函数名(){
    this.属性 = 值;
    this.方法 = function(){
    }
}
使用 new 构造函数名();
function Star(uname,age,sex){
    this.uname = uname;
    this.age = age;
    this.sex = sex;
    this.sing = function(song){
        console.log(song);
    }
}
var zxy = new Star('张学友',18,'男');
console.log(zxy.sing('李香兰'));
console.log(zxy.uname);
//构造函数名字首字母要大写·
  构造函数不需要return就可以返回结果
  调用构造函数 必须使用new
  只需要 new Star()调用函数 就创建了一个对象
  属性和方法前必须加this
**创建对象：利用构造函数创建对象的过程我们也称为对象的实例化////一辆真实的M5（对象实例）
**构造函数抽象了对象的公共部分 封装到了函数里 它泛指某一大类（class）///汽车设计图纸（构造函数）
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
new 的四步工作原理 当new 组合到构造函数名后
			1.在内存中开辟一个空间（用于新的空对象）
			2.将this指向开辟的空间
			3.进行函数内部的属性与方法工作
			4.返回值
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////PRACTICE////////////////////////////////////////////////
function Hero(name,type,blood){
    this.name = name;
    this.type = type;
    this.blood = blood;
    this.attack = function(att){
        console.log(att);
    }
}
var lianpo = new Hero('廉颇','力量型',500);
lianpo.attack('近战');
var houyi = new Hero('后羿','射手型',100);
houyi.attack('远程');
//////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************************

2.对象的使用 
(1)调用对象的属性 采用 对象名.属性名//obj.uname 这里的. 可以理解为"的"
              或者采用 对象名['属性名']//obj['uname']
(2)调用对象的方法 对象名.方法名() //obj.sayHi()	//*****不要忘记添加小括号*****\\


变量和属性的相同点 他们都是用来存储数据的
不同点：变量单独声明并赋值 使用的时候直接写变量名单独存在
        属性 在对象里面的不需要声明的 使用的时候必须是 对象.属性
函数和方法的相同点 都是实现某种功能 做某件事
不同点：函数是单独声明 并且调用的 函数名（）单独存在的
        方法 在对象里面 调用的时候 对象.方法()


3.对象的遍历
 for...in语句用于对数组或者对象的属性进行循环操作
基本语法格式 for (变量 in 对象){
  
             }
DEMO:
var obj = {
    name : 'pink',
    age : 'red',
    sex : 'blue' 
}
for(var k in obj){
    console.log(k);// 注意 k变量不需要赋值 输出得到的是属性名 name age sex
    console.log(obj[k]);//obj[k]输出得到的是 属性值 pink red blue **注意：只能用obj[k]这种格式 不能obj['k'] obj.k etc..//这里的遍历变量 通常用 k 或者 key 来表示
}
******************************************************************************************
******************************************************************************************
JAVASCRIPT的内置对象
js中的对象分为三种：自定义对象、内置对象、浏览器对象
内置对象：js语言自带的一些对象，这些对象供开发者使用，并提供一些常用的或是最基本而必要的功能（属性和方法）
学习一个内置对象的使用，只用学常用的成员，可以通过 MDN/W3C 查文档了解
		MDN:https://developer.mozilla.org/zh-CN/

封装个人数学对象
demo：
var myMath = {                     //封装开始
    pi : 3.14159265375,
    max : function(){
        var max = arguments[0];
	for(i = 1; i < arguments.length ; i++){
	    if(max < arguments[i]){
                max = arguments[i];
	    }
        }
    return max
    },
    min : function(){
        var min= arguments[0];
	for(i = 1; i < arguments.length ; i++){
	    if(min > arguments[i]){
                min= arguments[i];
	    }
        }
    return min;
    }
}       //封装结束
console.log(myMath.max(1,34,5,6,34,2,9,99));
console.log(myMath.min(2,23,5,56,78,4,-1,23,5));
console.log(myMath.pi);
******************************************************************************************
一个关于math的api//两个整数（包含）之间取随机整数
	function getRandomInt(min, max) {
  	min = Math.ceil(min);
  	max = Math.floor(max);
  	return Math.floor(Math.random() * (max - min)) + min; //不含最大值，含最小值
	}
获取时间日期API// ：：：date
var dat = new Date();
var year = dat.getFullYear();
var mon = dat.getMonth() + 1;//month从0开始计 比实际小1
var date = dat.getDate();
alert('现在是' + year + '年' + mon + '月' + date + '日');
console.log(Date.now());//距离1970年1月1日 过去的毫秒数（时间戳）
查看数组api  https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Arrays
关于数据结构是否为数组的查询：：instanceof
console.log(arr instanceof Array);//返回true
console.log(obj instanceof Object);//返回true

返回数组元素索引号的方法  indexOf(数组元素) 作用就是返回该数组元素的索引号
（只返回满足第一个条件的索引号，没有此元素返回-1）
console.log(arr.indexOf('red'));
lastIndexOf()从后往前查询 注意数组下索引标还是从正序0开始
console.log(arr.lastIndexOf('red'));
数组去重 
function filter(arr){
    var newArr = [];
    for (var i = 0; i < arr.length ; i++){
        if(newArr.indexOf(arr[i]) === -1){
            newArr[newArr.length] = arr[i];
        }
    }
    return nweArr;
}
******************************************************************************************
******************************************************************************************
